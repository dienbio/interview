AWSTemplateFormatVersion: '2010-09-09'
Description: Create a VPC with a public subnet, security group, IAM role, EC2 instance, and EC2 key pair in the Singapore (ap-southeast-1) region

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: environment
          Value: dev

  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: ap-southeast-1a  # Ensure this is in the ap-southeast-1 region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: environment
          Value: dev

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: environment
          Value: dev

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref PublicRouteTable

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref MyVPC  # Specify the VPC ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: environment
          Value: dev

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0efa0960891755965
      KeyName: ec2-keypair  # Use the specified EC2 Key Pair
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30  # Set the desired volume size to 30GB
            VolumeType: gp3
            DeleteOnTermination: true  # Optionally, set to false if you want to keep the volume on instance termination
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          DeleteOnTermination: true
          SubnetId: !Ref MyPublicSubnet
          GroupSet:
            - !Ref MySecurityGroup # Use the specified security group
      # IamInstanceProfile: MyEC2Role
      Tags:
        - Key: environment
          Value: dev
      # UserData:InternetRoute
      #   Fn::Base64: !Sub |
      #     #!/bin/bash
      #     set -e

      #     # Update the package list
      #     sudo apt-get update

      #     # Install Nginx
      #     sudo apt-get install -y nginx

      #     # Install MySQL 8
      #     sudo apt-get install -y mysql-server

      #     # Secure MySQL installation (set a root password and remove anonymous users)
      #     sudo mysql_secure_installation

      #     # Install PHP 8.1 and necessary extensions
      #     sudo apt-get install -y software-properties-common
      #     sudo add-apt-repository ppa:ondrej/php
      #     sudo apt-get update
      #     sudo apt-get install -y php8.1 php8.1-fpm php8.1-mysql php8.1-curl php8.1-json php8.1-cli php8.1-common php8.1-opcache php8.1-mbstring php8.1-zip php8.1-xml

      #     # Configure PHP-FPM for Nginx
      #     sudo systemctl enable php8.1-fpm
      #     sudo systemctl start php8.1-fpm

      #     # Configure Nginx to use PHP-FPM
      #     sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.backup
      #     sudo tee /etc/nginx/sites-available/default <<EOF
      #     server {
      #         listen 80 default_server;
      #         listen [::]:80 default_server;

      #         root /var/www/html;
      #         index index.php index.html index.htm;

      #         server_name _;

      #         location / {
      #             try_files \$uri \$uri/ =404;
      #         }

      #         location ~ \.php$ {
      #             include snippets/fastcgi-php.conf;
      #             fastcgi_pass unix:/run/php/php8.1-fpm.sock;
      #         }

      #         location ~ /\.ht {
      #             deny all;
      #         }
      #     }
      #     EOF

      #     # Test Nginx configuration
      #     sudo nginx -t

      #     # Reload Nginx to apply changes
      #     sudo systemctl reload nginx

      #     # Create a test PHP file to verify installation
      #     echo "<?php phpinfo(); ?>" | sudo tee /var/www/html/info.php

      #     # Restart Nginx and PHP-FPM
      #     sudo systemctl restart nginx
      #     sudo systemctl restart php8.1-fpm

Outputs:
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp
    Export:
      Name: PublicIP
